generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider    = "postgresql"
  url         = env("DATABASE_URL")
  extensions  = [vector]
}

model Session {
  id        String @id @default(uuid())
  userId    String
  token     String @unique
  expiresAt DateTime
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String @id @default(uuid())
  email         String @unique
  password      String  // Will store hashed password
  apiKey        String?  // OpenAI API key
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sessions      Session[]
  documents     Document[]
  conversations Conversation[]
}

model Document {
  id            String @id @default(uuid())
  title         String
  url           String  // URL to access the file
  blobPath      String // Path in blob storage
  userId        String
  user          User @relation(fields: [userId], references: [id])
  structure     Json?   // Store the document structure
  conversation  Conversation?
  chunks        DocumentChunk[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model DocumentChunk {
  id            String @id @default(uuid())
  content       String
  pageNumber    Int
  embedding     Unsupported("vector(1536)")  // Adjust vector dimensions based on your model
  documentId    String
  positionData  Json?  // Field to store position information as JSON
  document      Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([documentId])
}

model Conversation {
  id          String @id @default(uuid())
  userId      String
  user        User @relation(fields: [userId], references: [id])
  documentId  String @unique
  document    Document @relation(fields: [documentId], references: [id])
  messages    Message[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id              String @id @default(uuid())
  content         String
  role            String
  context         Json? // this would store references to relevant chunk IDs
  conversationId  String
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
}