name: AWS Deployment Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: teststudyfetch
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.9.0'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Create test .env file
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/teststudyfetch?schema=public" > .env
          echo "NODE_ENV=test" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          
      - name: Generate Prisma client
        run: npx prisma generate
        
      - name: Run database migrations
        run: npx prisma db push
        
      - name: Run lint
        run: npm run lint
        
      - name: Build application
        run: npm run build

  deploy_db:
    name: Deploy Database
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.9.0'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma client
        run: npx prisma generate

      - name: Debug database connection
        run: |
          # Extract hostname from DATABASE_URL (without exposing full credentials)
          DB_HOST=$(echo "${{ secrets.PROD_DATABASE_URL }}" | sed -E 's/.*@([^:\/]+).*/\1/')
          echo "Attempting to connect to database at $DB_HOST"
          
          # Install PostgreSQL client
          sudo apt-get update && sudo apt-get install -y postgresql-client
          
          # Test connection (without exposing password)
          if PGPASSWORD=$(echo "${{ secrets.PROD_DATABASE_URL }}" | sed -E 's/.*:([^@]+)@.*/\1/') pg_isready -h $DB_HOST; then
            echo "✅ Database connection successful"
          else
            echo "❌ Database connection failed"
            exit 1
          fi
        
      - name: Run database migrations
        run: |
          echo "DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}" > .env
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}
          
  build_and_deploy:
    name: Build and Deploy Application
    needs: [test, deploy_db]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.9.0'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Create production .env file
        run: |
          echo "DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}" > .env
          echo "NODE_ENV=production" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "S3_PDFBUCKET_NAME=${{ secrets.S3_PDFBUCKET_NAME }}" >> .env
          
      - name: Generate Prisma client
        run: npx prisma generate
      
      - name: Build application
        run: npm run build
        
      - name: Create Elastic Beanstalk deployment package
        run: |
          # Include necessary files and exclude development files
          zip -r deploy.zip . \
            -x "node_modules/*" \
            -x ".git/*" \
            -x ".github/*" \
            -x "*.log" \
            -x "*.md" \
            -x "*.DS_Store" \
            -x ".env.sample" \
            -x "docker-compose.yml"
      
      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: AiTutor
          environment_name: AiTutor-production
          version_label: aitutor-${{ github.sha }}
          region: ${{ secrets.AWS_REGION }}
          deployment_package: deploy.zip
          use_existing_version_if_available: false
          wait_for_deployment: true
          wait_for_environment_recovery: 300

  verify_deployment:
    name: Verify Deployment
    needs: build_and_deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Check application health
        run: |
          HEALTH_CHECK_URL=${{ secrets.APP_HEALTH_URL }}
          echo "Verifying deployment at $HEALTH_CHECK_URL"
          
          status_code=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL)
          
          if [ $status_code -eq 200 ] || [ $status_code -eq 301 ] || [ $status_code -eq 302 ]; then
            echo "✅ Application is running successfully!"
            exit 0
          else
            echo "❌ Application verification failed. Status code: $status_code"
            exit 1
          fi